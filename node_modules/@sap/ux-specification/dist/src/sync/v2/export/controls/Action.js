"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const decoration_1 = require("../../../common/decoration");
const types_1 = require("../../../common/types");
/**
 * Create stable ID for Toolbar Action button
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Toolbar Action button
 */
const getToolbarActionButtonId = (baseId, _idBreadcrumbs, breadcrumbs) => {
    const entity = breadcrumbs[breadcrumbs.length - 1];
    return `${baseId}action::${entity}`;
};
const flexRuleForToolbarAction = {
    controlId: getToolbarActionButtonId,
    controlType: () => types_1.ControlType.Button,
    createFlexChange: decoration_1.exportToFlexChange
};
class Action {
}
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], Action.prototype, "tooltip", void 0);
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], Action.prototype, "icon", void 0);
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], Action.prototype, "activeIcon", void 0);
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], Action.prototype, "type", void 0);
exports.Action = Action;
class ToolBarAction {
}
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], ToolBarAction.prototype, "tooltip", void 0);
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], ToolBarAction.prototype, "icon", void 0);
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], ToolBarAction.prototype, "activeIcon", void 0);
__decorate([
    decoration_1.syncRule({
        flex: flexRuleForToolbarAction
    })
], ToolBarAction.prototype, "type", void 0);
exports.ToolBarAction = ToolBarAction;
//# sourceMappingURL=Action.js.map